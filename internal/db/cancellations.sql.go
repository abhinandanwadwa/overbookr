// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cancellations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBookingForUpdate = `-- name: GetBookingForUpdate :one
SELECT id, event_id, user_id, seats, seat_ids, status, created_at
FROM bookings
WHERE id = $1
FOR UPDATE
`

type GetBookingForUpdateRow struct {
	ID        pgtype.UUID
	EventID   pgtype.UUID
	UserID    pgtype.UUID
	Seats     int32
	SeatIds   []pgtype.UUID
	Status    string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetBookingForUpdate(ctx context.Context, id pgtype.UUID) (GetBookingForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getBookingForUpdate, id)
	var i GetBookingForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Seats,
		&i.SeatIds,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateBookingToCancelled = `-- name: UpdateBookingToCancelled :exec
UPDATE bookings
SET status = 'cancelled'
WHERE id = $1 AND status = 'active'
`

func (q *Queries) UpdateBookingToCancelled(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateBookingToCancelled, id)
	return err
}

const updateEventBookedCountByDelta = `-- name: UpdateEventBookedCountByDelta :exec
UPDATE events
SET booked_count = booked_count + $1
WHERE id = $2
`

type UpdateEventBookedCountByDeltaParams struct {
	BookedCount int32
	ID          pgtype.UUID
}

func (q *Queries) UpdateEventBookedCountByDelta(ctx context.Context, arg UpdateEventBookedCountByDeltaParams) error {
	_, err := q.db.Exec(ctx, updateEventBookedCountByDelta, arg.BookedCount, arg.ID)
	return err
}

const updateSeatsToAvailableByIds = `-- name: UpdateSeatsToAvailableByIds :exec
UPDATE seats
SET status = 'available',
    booking_id = NULL,
    hold_token = NULL,
    hold_expires_at = NULL
WHERE id = ANY($1::uuid[])
`

func (q *Queries) UpdateSeatsToAvailableByIds(ctx context.Context, dollar_1 []pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateSeatsToAvailableByIds, dollar_1)
	return err
}
