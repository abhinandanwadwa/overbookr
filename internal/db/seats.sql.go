// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: seats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkInsertSeats = `-- name: BulkInsertSeats :many
INSERT INTO seats (event_id, seat_no)
SELECT $1, s FROM unnest($2::text[]) AS s
ON CONFLICT (event_id, seat_no) DO NOTHING
RETURNING id, seat_no, status, booking_id, created_at, updated_at
`

type BulkInsertSeatsParams struct {
	EventID pgtype.UUID
	Column2 []string
}

type BulkInsertSeatsRow struct {
	ID        pgtype.UUID
	SeatNo    string
	Status    string
	BookingID pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

// Insert many seat_no values for an event. Do nothing on conflict (preserve existing seats).
func (q *Queries) BulkInsertSeats(ctx context.Context, arg BulkInsertSeatsParams) ([]BulkInsertSeatsRow, error) {
	rows, err := q.db.Query(ctx, bulkInsertSeats, arg.EventID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkInsertSeatsRow
	for rows.Next() {
		var i BulkInsertSeatsRow
		if err := rows.Scan(
			&i.ID,
			&i.SeatNo,
			&i.Status,
			&i.BookingID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeatsByEvent = `-- name: GetSeatsByEvent :many
SELECT id, seat_no, status, booking_id, created_at, updated_at
FROM seats
WHERE event_id = $1
ORDER BY seat_no
`

type GetSeatsByEventRow struct {
	ID        pgtype.UUID
	SeatNo    string
	Status    string
	BookingID pgtype.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetSeatsByEvent(ctx context.Context, eventID pgtype.UUID) ([]GetSeatsByEventRow, error) {
	rows, err := q.db.Query(ctx, getSeatsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeatsByEventRow
	for rows.Next() {
		var i GetSeatsByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.SeatNo,
			&i.Status,
			&i.BookingID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
