// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: holds.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSeatsForEventForUpdate = `-- name: GetSeatsForEventForUpdate :many
SELECT id, seat_no, status
FROM seats
WHERE event_id = $1
    AND seat_no = ANY($2::text[])
ORDER BY id
FOR UPDATE
`

type GetSeatsForEventForUpdateParams struct {
	EventID pgtype.UUID
	Column2 []string
}

type GetSeatsForEventForUpdateRow struct {
	ID     pgtype.UUID
	SeatNo string
	Status string
}

func (q *Queries) GetSeatsForEventForUpdate(ctx context.Context, arg GetSeatsForEventForUpdateParams) ([]GetSeatsForEventForUpdateRow, error) {
	rows, err := q.db.Query(ctx, getSeatsForEventForUpdate, arg.EventID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeatsForEventForUpdateRow
	for rows.Next() {
		var i GetSeatsForEventForUpdateRow
		if err := rows.Scan(&i.ID, &i.SeatNo, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSeatHold = `-- name: InsertSeatHold :one
INSERT INTO seat_holds (hold_token, event_id, user_id, seat_ids, expires_at, status)
VALUES ($1, $2, $3, $4, $5, 'active')
RETURNING id, hold_token, expires_at
`

type InsertSeatHoldParams struct {
	HoldToken string
	EventID   pgtype.UUID
	UserID    pgtype.UUID
	SeatIds   []pgtype.UUID
	ExpiresAt pgtype.Timestamptz
}

type InsertSeatHoldRow struct {
	ID        pgtype.UUID
	HoldToken string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) InsertSeatHold(ctx context.Context, arg InsertSeatHoldParams) (InsertSeatHoldRow, error) {
	row := q.db.QueryRow(ctx, insertSeatHold,
		arg.HoldToken,
		arg.EventID,
		arg.UserID,
		arg.SeatIds,
		arg.ExpiresAt,
	)
	var i InsertSeatHoldRow
	err := row.Scan(&i.ID, &i.HoldToken, &i.ExpiresAt)
	return i, err
}

const updateSeatsToHeld = `-- name: UpdateSeatsToHeld :exec
UPDATE seats
SET status = 'held',
    hold_expires_at = $1,
    hold_token = $2
    -- updated_at = now()
WHERE id = ANY($3::uuid[])
`

type UpdateSeatsToHeldParams struct {
	HoldExpiresAt pgtype.Timestamptz
	HoldToken     pgtype.Text
	Column3       []pgtype.UUID
}

func (q *Queries) UpdateSeatsToHeld(ctx context.Context, arg UpdateSeatsToHeldParams) error {
	_, err := q.db.Exec(ctx, updateSeatsToHeld, arg.HoldExpiresAt, arg.HoldToken, arg.Column3)
	return err
}
