openapi: 3.0.3
info:
  title: Overbookr API
  version: "1.0.0"
  description: |
    # Overbookr - Advanced Event Booking System

    A comprehensive seat-level booking system with holds, waitlists, and real-time capacity management.

    ## Key Features
    - **Seat-Level Bookings**: Individual seat selection and management
    - **Hold System**: Temporary seat holds with expiration
    - **Waitlist Management**: Automatic promotion when seats become available
    - **Atomic Capacity Control**: Prevents overselling with atomic database operations
    - **Idempotent Operations**: Safe retry mechanisms for critical operations
    - **Real-time Analytics**: Comprehensive booking and utilization insights

    ## Authentication
    All protected endpoints require a valid JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting
    - Hold creation: 5 requests per minute per user
    - Booking creation: 10 requests per minute per user
    - General API: 100 requests per minute per user

    ## Error Handling
    All errors follow a consistent format:
    ```json
    {
      "error": "Error message",
      "details": "Additional details"
    }
    ```

  contact:
    name: Overbookr API Support
    email: support@overbookr.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://overbookr-production.up.railway.app
    description: Production Environment
  - url: http://localhost:8080
    description: Local Development Environment

tags:
  - name: Authentication
    description: User registration and authentication
  - name: Events
    description: Event management and seat operations
  - name: Bookings
    description: Booking creation, management, and cancellation
  - name: Holds
    description: Temporary seat holds
  - name: Waitlist
    description: Waitlist management
  - name: Analytics
    description: Booking analytics and insights
  - name: System
    description: System health and monitoring

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request"
        details:
          type: string
          description: Additional error details
          example: "The provided event ID is not a valid UUID"

    Health:
      type: object
      properties:
        status:
          type: string
          enum: [ok]
          example: "ok"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UserRegister:
      type: object
      required: [name, email, password, role]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 6
          example: "securepassword123"
        role:
          type: string
          enum: [user, admin]
          example: "user"

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "securepassword123"

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              description: JWT token for authentication
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Concert at Madison Square Garden"
        venue:
          type: string
          nullable: true
          example: "Madison Square Garden"
        start_time:
          type: string
          format: date-time
          nullable: true
          example: "2024-06-15T19:30:00Z"
        capacity:
          type: integer
          minimum: 0
          example: 1000
        booked_count:
          type: integer
          minimum: 0
          example: 750
        available:
          type: integer
          minimum: 0
          example: 250
        metadata:
          type: object
          additionalProperties: true
          example: {"genre": "rock", "age_restriction": "18+"}
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    CreateEventRequest:
      type: object
      required: [name, venue, start_time, capacity]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: "Concert at Madison Square Garden"
        venue:
          type: string
          minLength: 1
          maxLength: 200
          example: "Madison Square Garden"
        start_time:
          type: string
          format: date-time
          example: "2024-06-15T19:30:00Z"
        capacity:
          type: integer
          minimum: 1
          maximum: 100000
          example: 1000
        metadata:
          type: object
          additionalProperties: true
          example: {"genre": "rock", "age_restriction": "18+"}

    Seat:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        seat_no:
          type: string
          example: "A12"
        status:
          type: string
          enum: [available, held, booked, blocked]
          example: "available"
        booking_id:
          type: string
          format: uuid
          nullable: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    BulkCreateSeatsRequest:
      type: object
      required: [seat_nos]
      properties:
        seat_nos:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 1000
          example: ["A1", "A2", "A3", "B1", "B2"]

    CreateHoldRequest:
      type: object
      required: [event_id, seat_nos]
      properties:
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        seat_nos:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 10
          example: ["A12", "A13"]

    CreateHoldResponse:
      type: object
      properties:
        hold_token:
          type: string
          description: Token to use for booking creation
          example: "hold_123e4567-e89b-12d3-a456-426614174000"
        expires_at:
          type: string
          format: date-time
          description: When the hold expires
          example: "2024-01-15T10:35:00Z"

    CreateBookingRequest:
      type: object
      required: [event_id, hold_token]
      properties:
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        hold_token:
          type: string
          description: Token from hold creation
          example: "hold_123e4567-e89b-12d3-a456-426614174000"

    BookingSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        seat_numbers:
          type: array
          items:
            type: string
          example: ["A12", "A13"]
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    BookingResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        seats_count:
          type: integer
          minimum: 1
          example: 2
        seat_numbers:
          type: array
          items:
            type: string
          example: ["A12", "A13"]
        status:
          type: string
          enum: [active, cancelled, expired, failed]
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    JoinWaitlistRequest:
      type: object
      required: [requested_seats]
      properties:
        requested_seats:
          type: integer
          minimum: 1
          maximum: 10
          example: 2

    JoinWaitlistResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        position:
          type: integer
          minimum: 1
          description: Position in waitlist
          example: 5
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    AnalyticsResponse:
      type: object
      properties:
        range:
          $ref: '#/components/schemas/TimeRange'
        totals:
          $ref: '#/components/schemas/Totals'
        by_day:
          type: array
          items:
            $ref: '#/components/schemas/BookingsPerDayPoint'
        top_events:
          type: array
          items:
            $ref: '#/components/schemas/TopEvent'
        by_status:
          type: array
          items:
            $ref: '#/components/schemas/StatusCount'
        event_utilization:
          type: array
          items:
            $ref: '#/components/schemas/EventUtilizationPoint'

    TimeRange:
      type: object
      properties:
        from:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2024-01-31T23:59:59Z"

    Totals:
      type: object
      properties:
        total_bookings:
          type: integer
          minimum: 0
          example: 1250
        total_seats_booked:
          type: integer
          minimum: 0
          example: 3750
        total_cancellations:
          type: integer
          minimum: 0
          example: 50
        total_active:
          type: integer
          minimum: 0
          example: 1200

    BookingsPerDayPoint:
      type: object
      properties:
        day:
          type: string
          format: date
          example: "2024-01-15"
        bookings:
          type: integer
          minimum: 0
          example: 25
        seats_booked:
          type: integer
          minimum: 0
          example: 75

    TopEvent:
      type: object
      properties:
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Concert at Madison Square Garden"
        bookings_count:
          type: integer
          minimum: 0
          example: 500
        seats_booked:
          type: integer
          minimum: 0
          example: 1500
        capacity:
          type: integer
          minimum: 0
          example: 2000
        booked_count:
          type: integer
          minimum: 0
          example: 1500

    StatusCount:
      type: object
      properties:
        status:
          type: string
          enum: [active, cancelled, expired, failed]
          example: "active"
        count:
          type: integer
          minimum: 0
          example: 1200

    EventUtilizationPoint:
      type: object
      properties:
        event_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Concert at Madison Square Garden"
        capacity:
          type: integer
          minimum: 0
          example: 2000
        booked_count:
          type: integer
          minimum: 0
          example: 1500
        bookings_seats_in_range:
          type: integer
          minimum: 0
          example: 1200

    UpdateEventRequest:
      type: object
      description: Partial update for an event (PATCH semantics). Omit fields you don't want to change.
      properties:
        name:
          type: string
          example: "New Event Name"
        venue:
          type: string
          example: "Updated Venue"
        start_time:
          type: string
          format: date-time
          example: "2024-06-15T19:30:00Z"
        capacity:
          type: integer
          minimum: 0
          example: 1200
        metadata:
          type: object
          additionalProperties: true
          example: {"genre":"jazz"}

    DeleteResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        deleted:
          type: boolean
          example: true

paths:
  /healthz:
    get:
      tags: [System]
      summary: Health Check
      description: Check if the API is running and healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
              example:
                status: "ok"
                timestamp: "2024-01-15T10:30:00Z"

  /users/register:
    post:
      tags: [Authentication]
      summary: Register New User
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            example:
              name: "John Doe"
              email: "john.doe@example.com"
              password: "securepassword123"
              role: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                name: "John Doe"
                email: "john.doe@example.com"
                role: "user"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                created_at: "2024-01-15T10:30:00Z"
                updated_at: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid input"
                details: "Email is required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User already exists"
                details: "A user with this email already exists"

  /users/login:
    post:
      tags: [Authentication]
      summary: User Login
      description: Authenticate user and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: "john.doe@example.com"
              password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                name: "John Doe"
                email: "john.doe@example.com"
                role: "user"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                created_at: "2024-01-15T10:30:00Z"
                updated_at: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid credentials"

  /events:
    post:
      tags: [Events]
      summary: Create Event
      description: Create a new event (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
            example:
              name: "Concert at Madison Square Garden"
              venue: "Madison Square Garden"
              start_time: "2024-06-15T19:30:00Z"
              capacity: 1000
              metadata:
                genre: "rock"
                age_restriction: "18+"
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [Events]
      summary: List Events
      description: Get paginated list of events. Use `q` to search by event name or venue (case-insensitive substring).
      parameters:
        - name: limit
          in: query
          description: Number of events to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: offset
          in: query
          description: Number of events to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: q
          in: query
          description: Optional search term; filters events by name or venue using case-insensitive substring match
          required: false
          schema:
            type: string
            example: "concert"
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}:
    get:
      tags: [Events]
      summary: Get Event by ID
      description: Retrieve a specific event by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [Events]
      summary: Update Event (partial)
      description: Update an event (PATCH semantics). Only admins can update events. Omit fields you don't want to change.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
            example:
              name: "Updated Concert Name"
              capacity: 1200
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid request data (e.g. capacity < booked_count)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Events]
      summary: Delete Event
      description: Delete an event and cascade-delete dependent rows (admin only).
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                deleted: true
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}/seats:
    get:
      tags: [Events]
      summary: Get Event Seat Map
      description: Get all seats for an event with their current status
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Seat map
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [Events]
      summary: Bulk Create Seats
      description: Create multiple seats for an event (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCreateSeatsRequest'
            example:
              seat_nos: ["A1", "A2", "A3", "B1", "B2", "B3"]
      responses:
        '201':
          description: Seats created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}/waitlist:
    post:
      tags: [Waitlist]
      summary: Join Event Waitlist
      description: Add user to event waitlist when seats are not available
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Event UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinWaitlistRequest'
            example:
              requested_seats: 2
      responses:
        '202':
          description: Successfully added to waitlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinWaitlistResponse'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                position: 5
                created_at: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already in waitlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /holds:
    post:
      tags: [Holds]
      summary: Create Seat Hold
      description: |
        Create a temporary hold on seats for a limited time (default 5 minutes).
        This allows users to select seats before completing payment.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHoldRequest'
            example:
              event_id: "123e4567-e89b-12d3-a456-426614174000"
              seat_nos: ["A12", "A13"]
      responses:
        '201':
          description: Hold created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHoldResponse'
              example:
                hold_token: "hold_123e4567-e89b-12d3-a456-426614174000"
                expires_at: "2024-01-15T10:35:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event or seats not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Seats not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings:
    post:
      tags: [Bookings]
      summary: Create Booking
      description: |
        Create a booking using a valid hold token. This operation is idempotent.
        If the same idempotency key is used, the existing booking will be returned.
      security:
        - BearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Unique key to ensure idempotent operations
          schema:
            type: string
          example: "booking_123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
            example:
              event_id: "123e4567-e89b-12d3-a456-426614174000"
              hold_token: "hold_123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Existing booking returned (idempotent)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSummary'
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSummary'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                event_id: "123e4567-e89b-12d3-a456-426614174000"
                seat_numbers: ["A12", "A13"]
                created_at: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |
            Conflict - Either seats not available, hold expired, 
            or idempotency key mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                capacity_exceeded:
                  summary: Event capacity exceeded
                  value:
                    error: "event capacity exceeded"
                    details: "not enough capacity to book the requested seats"
                hold_expired:
                  summary: Hold token expired
                  value:
                    error: "hold token expired"
                    details: "The hold token has expired"

    get:
      tags: [Bookings]
      summary: Get My Bookings
      description: Get all bookings for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{id}:
    get:
      tags: [Bookings]
      summary: Get Booking by ID
      description: Get a specific booking by ID (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Booking UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the booking owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Bookings]
      summary: Cancel Booking
      description: Cancel a booking (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Booking UUID
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  status:
                    type: string
                    example: "cancelled"
        '400':
          description: Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the booking owner or admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Booking cannot be cancelled (invalid status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/total_bookings:
    get:
      tags: [Analytics]
      summary: Get Booking Analytics
      description: |
        Get comprehensive booking analytics including totals, trends, 
        and event utilization (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: from
          in: query
          description: Start date (ISO 8601 or YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00Z"
        - name: to
          in: query
          description: End date (ISO 8601 or YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-31T23:59:59Z"
        - name: top_n
          in: query
          description: Number of top events to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          example: 10
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
              example:
                range:
                  from: "2024-01-01T00:00:00Z"
                  to: "2024-01-31T23:59:59Z"
                totals:
                  total_bookings: 1250
                  total_seats_booked: 3750
                  total_cancellations: 50
                  total_active: 1200
                by_day:
                  - day: "2024-01-15"
                    bookings: 25
                    seats_booked: 75
                top_events:
                  - event_id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Concert at Madison Square Garden"
                    bookings_count: 500
                    seats_booked: 1500
                    capacity: 2000
                    booked_count: 1500
                by_status:
                  - status: "active"
                    count: 1200
                  - status: "cancelled"
                    count: 50
                event_utilization:
                  - event_id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Concert at Madison Square Garden"
                    capacity: 2000
                    booked_count: 1500
                    bookings_seats_in_range: 1200
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []
